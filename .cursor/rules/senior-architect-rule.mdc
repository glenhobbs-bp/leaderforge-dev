---
description: Architectural integrity and system design governance
globs:
alwaysApply: true
---
# Senior Architect Rule

**Rule:** You are a senior architect responsible for maintaining architectural integrity, preventing technical debt, and ensuring all technical decisions align with established patterns and principles.

## Core Architectural Principles

### Agent-Native Platform Architecture
- **Agent-Native Orchestration:** All business logic and data access must be orchestrated by agents, not hardcoded in the UI or API endpoints.
- **Schema-Driven UI:** The frontend renders only what is described in the agent's returned schema. No UI logic or business rules in the frontend.
- **Modular Tools:** Tools are reusable, context-aware backend helpers. Tools must not contain UI logic or cross-module dependencies.
- **Separation of Concerns:** UI, agent orchestration, tools, and data access must remain strictly decoupled.
- **Observability:** All agent runs and tool calls must be observable and auditable (e.g., via LangSmith).

### System-Wide Constraints
- **Backend Rules:** APIs must only invoke agents and return their schema. All orchestration in agents (LangGraph or LLM-based). Tools must be stateless, composable, and context-driven.
- **Frontend Rules:** Never call tools or database directly. All data/UI state from agent schema. UI components generic, render based on schema. All user actions sent as intents to agents.
- **Tool Rules:** Pure backend helpers‚Äîno UI, no cross-module logic. Registered and versioned for agent use. Must not assume knowledge of agent workflows.
- **Agent Rules:** Orchestrate all business logic, tool usage, schema composition. Centrally registered and versioned. Observable and debuggable.
- **API Rules:** Thin endpoints: receive intent, invoke agent, return schema. No business logic, data access, or tool calls in handlers.

## 1. Architectural Consistency Gate

Before any implementation begins:

### Authentication & Authorization Consistency
- ‚úÖ **SSR-first approach**: All auth must use server-side rendering patterns
- ‚ùå **Never mix auth patterns**: No client-side auth, no mixed approaches
- ‚úÖ **Single auth flow**: Use established Supabase SSR + session management
- ‚ùå **No auth shortcuts**: Every route must follow the same auth pattern

### Data Access Consistency
- ‚úÖ **Single database path**: All data access through established service layer
- ‚ùå **No direct DB calls**: API routes must never contain business logic
- ‚úÖ **Repository pattern**: Use established repositories for all data access
- ‚ùå **No ORM bypass**: Never circumvent established data access patterns

### Separation of Concerns Enforcement
- ‚úÖ **Agent-native orchestration**: All business logic in agents, not UI/API
- ‚ùå **No logic in API routes**: API routes are thin, agents handle orchestration
- ‚úÖ **Schema-driven UI**: Frontend renders based on agent schemas only
- ‚ùå **No hardcoded UI logic**: UI components must be generic and configurable
- ‚úÖ **Modular tools**: Tools are stateless, context-aware backend helpers
- ‚ùå **No cross-module dependencies**: Tools must not assume agent workflows

### Component Architecture Consistency
- ‚úÖ **NavPanel + ContentPanel layout**: Established UI pattern with CopilotKit modal
- ‚ùå **No custom layouts**: All features must fit the established UI pattern
- ‚úÖ **CopilotKit integration**: Use pure CopilotKit API, no modifications
- ‚ùå **No CopilotKit bypasses**: Chat features must go through CopilotKit

### Agent-Native Composition System
- ‚úÖ **Modular monolith**: Components in registry, not microservices or monolith
- ‚ùå **No monolithic components**: Break large components into composable parts
- ‚úÖ **Agent-discoverable components**: All components registered and schema-described
- ‚ùå **No hardcoded compositions**: Agents must compose from available components
- ‚úÖ **Universal schema compliance**: All compositions follow established schema
- ‚ùå **No direct component imports**: Use component registry for discovery

## 2. Mandatory Decision Escalation Framework

When encountering any technical decision, you MUST:

### Stop and Assess Impact
1. **Identify the decision type**:
   - Configuration change
   - New component/pattern
   - Database schema change
   - Integration approach
   - Authentication modification
   - API design choice

2. **Evaluate architectural alignment**:
   - Does this follow established patterns?
   - Will this create technical debt?
   - Does this maintain separation of concerns?
   - Is this consistent with our agent-native approach?

### Escalate Decision to User
**Format for all decisions:**

```
üèóÔ∏è ARCHITECTURAL DECISION REQUIRED

**Decision:** [Clear statement of what needs to be decided]

**Context:** [Why this decision is needed]

**Options:**
1. [Option 1 with pros/cons]
2. [Option 2 with pros/cons]
3. [Option 3 with pros/cons]

**Recommendation:** [Your recommended approach with rationale]

**Architectural Impact:** [How this affects overall system architecture]

**Technical Debt Risk:** [Assessment of potential debt introduction]

Please confirm your preferred approach before I proceed.
```

## 3. Architectural Red Flags - Immediate Stop

**NEVER proceed if you detect:**

- ‚ùå **Mixed auth patterns**: Client + server auth in same flow
- ‚ùå **Business logic in API routes**: Logic should be in agents/services
- ‚ùå **Direct database access**: Bypassing established service layer
- ‚ùå **Hardcoded configurations**: Values should come from config/schema
- ‚ùå **Cross-module coupling**: Modules directly importing from each other
- ‚ùå **UI business logic**: Frontend making business decisions
- ‚ùå **Multiple data access paths**: Different patterns for same operation
- ‚ùå **Schema inconsistencies**: Not following established type patterns
- ‚ùå **Monolithic components**: Large components that should be composable
- ‚ùå **Direct component dependencies**: Bypassing component registry system
- ‚ùå **Agent layer bypass**: "Quick fixes" that skip agent orchestration
- ‚ùå **Hardcoded business rules**: Logic in UI or API instead of agents

## 4. Quality Gates & Feature Completeness

### Testing & Review Requirements
- All new features must be tested end-to-end via agent invocation
- No feature is complete unless it is agent-native and schema-driven
- Code reviews must check for architectural purity and separation of concerns

### New Feature Checklist
- [ ] All business logic is in the agent, not the UI or API
- [ ] UI is schema-driven and generic
- [ ] Tools are modular, stateless, and context-aware
- [ ] API endpoints are thin and agent-native
- [ ] Feature is observable in LangSmith or equivalent
- [ ] Code review confirms architectural purity
- [ ] Themes (colors, typography, etc.) are managed as configuration and dynamic
- [ ] All files include standardized header comments (Purpose, Owner, Tags)
- [ ] File manifest updated via `npm run generate-manifest` after changes

## 5. Technical Debt Prevention Checklist

Before any code change:

- [ ] **Consistency check**: Does this follow established patterns?
- [ ] **Separation verified**: Is logic in the correct layer?
- [ ] **Schema alignment**: Does this match our type system?
- [ ] **Auth pattern confirmed**: Uses SSR-only approach?
- [ ] **Agent-native verified**: Business logic in agents, not endpoints?
- [ ] **Modularity maintained**: No cross-module dependencies?
- [ ] **Configuration-driven**: No hardcoded values?
- [ ] **Future-proof**: Won't require major refactoring later?
- [ ] **Component registry used**: Components registered and discoverable?
- [ ] **Composition schema valid**: Follows universal schema patterns?

## 6. Implementation Protocol

1. **Pre-implementation**: Run architectural consistency gate
2. **Decision point**: Use escalation framework for any architectural choice
3. **Decision documentation**: Create ADR for all architectural decisions
4. **Implementation**: Follow established patterns exactly
5. **Post-implementation**: Verify no architectural drift introduced
6. **Documentation**: Update all related documentation

## 7. Architecture Decision Record (ADR) Requirements

**MANDATORY for all architectural decisions:**

### When to Create an ADR
- **Architecture changes**: System design, component relationships, data flow
- **Technology decisions**: Framework, library, or tool choices
- **Pattern establishment**: New development patterns or conventions
- **Integration approaches**: External service integration strategies
- **Performance/security decisions**: Non-functional requirement implementations

### ADR Creation Process
1. **Use escalation framework** to get user approval for decision
2. **Create ADR immediately** after decision approval using template
3. **Assign unique number** (ADR-XXXX format, increment from latest)
4. **Store in** `docs/architecture/adr/` directory
5. **Update ADR index** with summary and links

### ADR Quality Requirements
- [ ] **Decision clearly stated** with one-sentence summary
- [ ] **All options documented** with pros/cons analysis
- [ ] **Implementation impact** thoroughly assessed
- [ ] **Success criteria** defined and measurable
- [ ] **Risk assessment** completed with mitigations
- [ ] **Follow-up actions** assigned with owners and deadlines

**Remember**: Every architectural decision becomes precedent. Document thoroughly to prevent future confusion and enable informed evolution. Every shortcut taken today becomes technical debt tomorrow.
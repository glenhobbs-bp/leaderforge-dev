---
description:
globs: *.tsx,*.css,*.ts
alwaysApply: false
---
# LeaderForge Frontend Cursor Rules

## üéØ Frontend Architecture Principles

### Core Rules
1. **CopilotKit remains pure** - Never modify CopilotKit internals
2. **Conversation-first UI** - Every feature accessible via chat
3. **Module-driven components** - Components adapt to active module
4. **Offline-first design** - Assume network can fail anytime
5. **No hardcoded content** - Everything comes from configuration

## üìÅ File Structure & Naming

```typescript
// Component files
components/
  agents/
    AgentPanel.tsx           // PascalCase for components
    AgentPanel.test.tsx      // Colocated tests
    AgentPanel.module.css    // CSS modules when needed

// Hook files
hooks/
  useAgentState.ts          // camelCase prefixed with 'use'
  useModuleConfig.ts

// Utility files
lib/
  format-message.ts         // kebab-case for utilities
  module-loader.ts
```

## üß© Component Patterns

### Module-Aware Components
```typescript
// ALWAYS make components module-aware
export function ContentCard({ content }: ContentCardProps) {
  const { currentModule } = useModuleContext();
  const theme = moduleThemes[currentModule];

  return (
    <Card className={cn(
      "content-card",
      theme.cardStyles // Dynamic styling based on module
    )}>
      {/* Content */}
    </Card>
  );
}

// NEVER hardcode module-specific logic
// BAD
if (module === 'wealth') {
  return <WealthDashboard />;
}

// GOOD
const DashboardComponent = moduleDashboards[module];
return <DashboardComponent />;
```

### CopilotKit Integration
```typescript
// ALWAYS use CopilotKit's pure API
import { useCopilotChat } from "@copilotkit/react-core";

export function ChatInterface() {
  const { sendMessage, messages } = useCopilotChat();

  // NEVER bypass CopilotKit for chat features
  // Let CopilotKit handle the chat state

  return (
    <CopilotChat
      instructions={moduleInstructions[currentModule]}
      onMessage={handleAgentRouting}
    />
  );
}

// Agent routing stays separate from CopilotKit
function handleAgentRouting(message: Message) {
  // Route to appropriate agent based on intent
  // Return response to CopilotKit
}
```

### Offline Storage Pattern
```typescript
// ALWAYS implement offline-first
import { useOfflineStorage } from '@/hooks/useOfflineStorage';

export function JournalEntry() {
  const { save, sync, status } = useOfflineStorage('journal');

  const handleSave = async (entry: Entry) => {
    // Save locally first
    await save(entry);

    // Sync when online
    if (navigator.onLine) {
      await sync();
    }
  };

  // ALWAYS show sync status
  return (
    <div>
      <SyncStatus status={status} />
      {/* Entry form */}
    </div>
  );
}
```

### Dynamic Module Loading
```typescript
// Module configuration drives UI
export function ModuleLayout() {
  const { contextConfig, loading } = useModuleConfig();

  if (loading) return <ModuleSkeleton />;

  return (
    <div style={contextConfig.theme}>
      <Navigation items={contextConfig.navigation} />
      <AgentList agents={contextConfig.agents} />
      <DynamicContent config={contextConfig.content} />
    </div>
  );
}

// NEVER import module-specific components at top level
// Use dynamic imports
const ModuleComponent = lazy(() =>
  import(`@/modules/${moduleName}/Component`)
);
```

## üé® Styling Rules

### Tailwind + CSS Variables
```typescript
// ALWAYS use CSS variables for module theming
export function ThemedComponent() {
  return (
    <div className="bg-[var(--module-primary)] text-[var(--module-text)]">
      {/* Module theme applied via CSS variables */}
    </div>
  );
}

// Set variables at module root
<ModuleProvider
  style={{
    '--module-primary': contextConfig.theme.primary,
    '--module-text': contextConfig.theme.text,
  }}
>
```

### Responsive Design
```typescript
// ALWAYS design mobile-first
<div className="
  p-4           // Mobile
  md:p-6        // Tablet
  lg:p-8        // Desktop

  grid grid-cols-1
  md:grid-cols-2
  lg:grid-cols-3
">
```

## üîÑ State Management

### Client State (Zustand)
```typescript
// ALWAYS use slices for organization
interface ModuleSlice {
  currentModule: string;
  setModule: (module: string) => void;
}

interface AgentSlice {
  activeAgent: Agent | null;
  setActiveAgent: (agent: Agent) => void;
}

// Combine slices
export const useStore = create<ModuleSlice & AgentSlice>()(
  devtools(
    persist(
      (...args) => ({
        ...createModuleSlice(...args),
        ...createAgentSlice(...args),
      }),
      {
        name: 'leaderforge-store',
        partialize: (state) => ({
          currentModule: state.currentModule // Only persist necessary data
        }),
      }
    )
  )
);
```

### Server State (React Query)
```typescript
// ALWAYS use React Query for server data
export function useContent(moduleId: string) {
  return useQuery({
    queryKey: ['content', moduleId],
    queryFn: () => fetchModuleContent(moduleId),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes

    // ALWAYS handle offline
    networkMode: 'offlineFirst',
  });
}

// Mutations with optimistic updates
export function useUpdateProgress() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: updateProgress,
    onMutate: async (newProgress) => {
      // Optimistic update
      await queryClient.cancelQueries(['progress']);
      const previous = queryClient.getQueryData(['progress']);
      queryClient.setQueryData(['progress'], newProgress);
      return { previous };
    },
    onError: (err, newProgress, context) => {
      // Rollback on error
      queryClient.setQueryData(['progress'], context.previous);
    },
  });
}
```

## üîí Security Patterns

### Input Validation
```typescript
// ALWAYS validate user input
import { z } from 'zod';

const MessageSchema = z.object({
  content: z.string().min(1).max(1000),
  attachments: z.array(z.instanceof(File)).max(5).optional(),
});

export function ChatInput() {
  const handleSubmit = (data: unknown) => {
    try {
      const validated = MessageSchema.parse(data);
      // Process validated data
    } catch (error) {
      toast.error('Invalid message format');
    }
  };
}
```

### Secure Storage
```typescript
// ALWAYS encrypt sensitive data
import { encrypt, decrypt } from '@/lib/crypto';

export function useSecureStorage() {
  const save = async (key: string, data: any) => {
    const encrypted = await encrypt(data);
    localStorage.setItem(key, encrypted);
  };

  const load = async (key: string) => {
    const encrypted = localStorage.getItem(key);
    if (!encrypted) return null;
    return decrypt(encrypted);
  };

  return { save, load };
}
```

## ‚ö° Performance Rules

### Code Splitting
```typescript
// ALWAYS code split by module
const ModuleRoutes = {
  movement: lazy(() => import('@/modules/movement/Routes')),
  leaderforge: lazy(() => import('@/modules/leaderforge/Routes')),
  wealth: lazy(() => import('@/modules/wealth/Routes')),
};

// Preload on hover
function ModuleLink({ module, children }) {
  const handleMouseEnter = () => {
    ModuleRoutes[module].preload();
  };

  return (
    <Link onMouseEnter={handleMouseEnter}>
      {children}
    </Link>
  );
}
```

### Image Optimization
```typescript
// ALWAYS use Next.js Image
import Image from 'next/image';

export function ContentThumbnail({ src, alt }) {
  return (
    <Image
      src={src}
      alt={alt}
      width={300}
      height={200}
      placeholder="blur"
      blurDataURL={generateBlurDataURL(src)}
      loading="lazy"
    />
  );
}
```

### Memoization
```typescript
// MEMOIZE expensive computations
export function AgentList({ agents, filter }) {
  const filteredAgents = useMemo(
    () => agents.filter(agent =>
      agent.capabilities.some(cap =>
        cap.includes(filter)
      )
    ),
    [agents, filter]
  );

  return filteredAgents.map(agent => (
    <AgentCard key={agent.id} agent={agent} />
  ));
}

// MEMOIZE components with stable props
export const AgentCard = memo(({ agent }) => {
  // Component implementation
}, (prevProps, nextProps) => {
  return prevProps.agent.id === nextProps.agent.id;
});
```

## üß™ Testing Patterns

### Component Testing
```typescript
// ALWAYS test user interactions
import { renderWithProviders } from '@/test/utils';

describe('ChatInterface', () => {
  it('should send message through CopilotKit', async () => {
    const { user } = renderWithProviders(<ChatInterface />);

    const input = screen.getByRole('textbox');
    await user.type(input, 'Show me leadership videos');
    await user.keyboard('{Enter}');

    // Verify CopilotKit received message
    expect(mockSendMessage).toHaveBeenCalledWith(
      expect.stringContaining('leadership videos')
    );
  });

  it('should work offline', async () => {
    // Simulate offline
    vi.spyOn(navigator, 'onLine', 'get').mockReturnValue(false);

    // Test offline functionality
  });
});
```

### Hook Testing
```typescript
// ALWAYS test hooks in isolation
import { renderHook, waitFor } from '@testing-library/react';

describe('useModuleConfig', () => {
  it('should load module configuration', async () => {
    const { result } = renderHook(() => useModuleConfig('movement'));

    await waitFor(() => {
      expect(result.current.contextConfig).toBeDefined();
      expect(result.current.contextConfig.id).toBe('movement');
    });
  });
});
```

### Video Content Integration
```typescript
// ALWAYS use Tribe's video player for consistency
export function VideoPlayer({ contentId }: VideoPlayerProps) {
  const { tribeContentId } = useContent(contentId);
  const { trackProgress } = useVideoAnalytics();

  // Use Tribe's player with our tracking
  return (
    <TribeVideoPlayer
      contentId={tribeContentId}
      onProgress={(data) => {
        // Sync to our system for agent context
        trackProgress({
          contentId,
          tribeContentId,
          ...data
        });
      }}
      onComplete={() => {
        // Notify agents of completion
        agentService.notifyCompletion(contentId);
      }}
    />
  );
}

// Content search through agents
export function useContentSearch() {
  const { sendMessage } = useCopilotChat();

  const searchContent = async (query: string) => {
    // Let the agent handle search
    const response = await sendMessage({
      content: `Find videos about ${query}`,
      intent: 'content_search'
    });

    // Agent returns Tribe content formatted for display
    return response.content;
  };

  return { searchContent };
}
```

## üö® Common Pitfalls to Avoid

1. **DON'T modify CopilotKit internals** - Use composition and callbacks
2. **DON'T create module-specific components** - Use configuration
3. **DON'T skip offline handling** - Every feature must work offline
4. **DON'T hardcode themes** - Use CSS variables
5. **DON'T bypass the module system** - Everything goes through modules
6. **DON'T store server data in Zustand** - Use React Query
7. **DON'T trust user input** - Always validate with Zod
8. **DON'T skip loading states** - Every async operation needs feedback
9. **DON'T ignore errors** - Show user-friendly error messages
10. **DON'T forget accessibility** - ARIA labels, keyboard navigation
11. **DON'T rebuild video features** - Use Tribe's player and analytics
12. **DON'T direct search Tribe** - Let agents handle content discovery

## üìù Checklist for New Features

- [ ] Works through conversation interface
- [ ] Adapts to current module theme
- [ ] Handles offline scenarios
- [ ] Validates all user input
- [ ] Shows loading/error states
- [ ] Includes proper TypeScript types
- [ ] Has comprehensive tests
- [ ] Follows performance best practices
- [ ] Accessible via keyboard
- [ ] Mobile responsive
/**
 * File: apps/web/app/api/agent/context/route.ts
 * Purpose: Agent-native endpoint for context discovery and UI schema generation
 * Owner: Engineering Team
 * Tags: #api #agent-native #context #ui-schema
 */

import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { restoreSession } from '../../../lib/supabaseServerClient';
import { createContextResolutionAgent } from 'agent-core/agents/ContextResolutionAgent';

/**
 * POST /api/agent/context
 * Agent-native endpoint that determines what context/UI to show based on user entitlements.
 * Returns a complete UI schema generated by agents, not hardcoded database lookups.
 */
export async function POST(req: NextRequest) {
  const startTime = Date.now();
  console.log('[API] POST /api/agent/context - agent-native context discovery');

  try {
    // Parse request body
    const requestBody = await req.json().catch(() => ({}));
    const userMessage = requestBody.message || 'What should I see on my dashboard?';
    const requestedContext = requestBody.context || 'leaderforge';
    console.log('[API] Request body:', JSON.stringify(requestBody, null, 2));

    // Get authenticated session
    const cookieStore = await cookies();
    const { session, supabase, error: sessionError } = await restoreSession(cookieStore);

    if (sessionError || !session?.user) {
      console.log('[API] No authenticated session found');
      return NextResponse.json({
        error: 'Unauthorized',
        details: 'Authentication required for context discovery'
      }, { status: 401 });
    }

    const userId = session.user.id;
    console.log('[API] âœ… Authenticated user:', userId);

    // Agent-native: Use ContextResolutionAgent to orchestrate entire context discovery
    const agent = createContextResolutionAgent(supabase);
    const contextResult = await agent.resolveUserContexts({
      userId,
      tenantKey: requestedContext,
      userMessage,
      includePreferences: true
    });

    // Build response with agent-generated context in the format CopilotKitProvider expects
    const agentResponse = {
      success: true,
      context: {
        systemInstructions: contextResult.systemInstructions,
        appliedContexts: contextResult.appliedContexts,
        userPreferences: contextResult.userPreferences,
        metadata: {
          ...contextResult.metadata,
          responseTime: Date.now() - startTime,
          userMessage,
          requestedContext,
          contextId: `context_${Date.now()}`
        }
      }
    };

    const endTime = Date.now();
    const duration = endTime - startTime;

    console.log(`[API] Agent-generated context schema returned in ${duration}ms`);

    return NextResponse.json(agentResponse, {
      status: 200,
      headers: {
        'X-Response-Time': `${duration}ms`,
        'X-Cache-Status': 'agent-generated',
        'Cache-Control': 'no-store', // Don't cache agent responses
      }
    });

  } catch (error) {
    const err = error as Error;
    const endTime = Date.now();
    const duration = endTime - startTime;

    console.error(`[API] Agent context discovery failed (${duration}ms):`, err);
    return NextResponse.json({
      error: 'Agent context discovery failed',
      details: err.message
    }, { status: 500 });
  }
}